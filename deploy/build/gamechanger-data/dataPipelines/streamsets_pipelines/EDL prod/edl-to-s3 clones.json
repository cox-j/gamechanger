{
  "pipelineConfig" : {
    "schemaVersion" : 6,
    "version" : 10,
    "pipelineId" : "EDLtoHDFSTransferV925f4cd08-0da7-4d27-b985-e2b0e286416a",
    "title" : "EDL to HDFS Transfer V10",
    "description" : "Route the files based on system drop down selection in EDL app",
    "uuid" : "6c439d76-1fc1-4006-b8ba-a7b5cfbead01",
    "configuration" : [ {
      "name" : "executionMode",
      "value" : "STANDALONE"
    }, {
      "name" : "edgeHttpUrl",
      "value" : "http://localhost:18633"
    }, {
      "name" : "deliveryGuarantee",
      "value" : "AT_LEAST_ONCE"
    }, {
      "name" : "testOriginStage",
      "value" : "streamsets-datacollector-dev-lib::com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource::3"
    }, {
      "name" : "startEventStage",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
    }, {
      "name" : "stopEventStage",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
    }, {
      "name" : "shouldRetry",
      "value" : true
    }, {
      "name" : "retryAttempts",
      "value" : -1
    }, {
      "name" : "memoryLimit",
      "value" : "${jvm:maxMemoryMB() * 0.85}"
    }, {
      "name" : "memoryLimitExceeded",
      "value" : "LOG"
    }, {
      "name" : "notifyOnStates",
      "value" : [ "RUN_ERROR", "STOPPED", "FINISHED" ]
    }, {
      "name" : "emailIDs",
      "value" : [ ]
    }, {
      "name" : "constants",
      "value" : [ ]
    }, {
      "name" : "badRecordsHandling",
      "value" : "streamsets-datacollector-cdh_6_0-lib::com_streamsets_pipeline_stage_destination_kafka_ToErrorKafkaDTarget::4"
    }, {
      "name" : "errorRecordPolicy",
      "value" : "ORIGINAL_RECORD"
    }, {
      "name" : "statsAggregatorStage",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_StatsDpmDirectlyDTarget::1"
    }, {
      "name" : "workerCount",
      "value" : 0
    }, {
      "name" : "clusterSlaveMemory",
      "value" : 2048
    }, {
      "name" : "clusterSlaveJavaOpts",
      "value" : "-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -Dlog4j.debug"
    }, {
      "name" : "clusterLauncherEnv",
      "value" : [ ]
    }, {
      "name" : "mesosDispatcherURL",
      "value" : null
    }, {
      "name" : "logLevel",
      "value" : "INFO"
    }, {
      "name" : "hdfsS3ConfDir",
      "value" : null
    }, {
      "name" : "rateLimit",
      "value" : 0
    }, {
      "name" : "maxRunners",
      "value" : 0
    }, {
      "name" : "shouldCreateFailureSnapshot",
      "value" : true
    }, {
      "name" : "runnerIdleTIme",
      "value" : 60
    }, {
      "name" : "webhookConfigs",
      "value" : [ ]
    }, {
      "name" : "sparkConfigs",
      "value" : [ ]
    }, {
      "name" : "amazonEMRConfig.userRegion",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.userRegionCustom",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.accessKey",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.secretKey",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.s3StagingUri",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.provisionNewCluster",
      "value" : false
    }, {
      "name" : "amazonEMRConfig.clusterId",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.clusterPrefix",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.terminateCluster",
      "value" : false
    }, {
      "name" : "amazonEMRConfig.loggingEnabled",
      "value" : true
    }, {
      "name" : "amazonEMRConfig.s3LogUri",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.enableEMRDebugging",
      "value" : true
    }, {
      "name" : "amazonEMRConfig.serviceRole",
      "value" : "EMR_DefaultRole"
    }, {
      "name" : "amazonEMRConfig.jobFlowRole",
      "value" : "EMR_EC2_DefaultRole"
    }, {
      "name" : "amazonEMRConfig.visibleToAllUsers",
      "value" : true
    }, {
      "name" : "amazonEMRConfig.ec2SubnetId",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.masterSecurityGroup",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.slaveSecurityGroup",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.instanceCount",
      "value" : 2
    }, {
      "name" : "amazonEMRConfig.masterInstanceType",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.masterInstanceTypeCustom",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.slaveInstanceType",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.slaveInstanceTypeCustom",
      "value" : null
    } ],
    "uiInfo" : {
      "previewConfig" : {
        "previewSource" : "CONFIGURED_SOURCE",
        "batchSize" : "100",
        "timeout" : 30000,
        "writeToDestinations" : false,
        "executeLifecycleEvents" : false,
        "showHeader" : true,
        "showFieldType" : true,
        "rememberMe" : false
      }
    },
    "fragments" : [ ],
    "stages" : [ {
      "instanceName" : "JDBCQueryConsumer_01",
      "library" : "streamsets-datacollector-jdbc-lib",
      "stageName" : "com_streamsets_pipeline_stage_origin_jdbc_JdbcDSource",
      "stageVersion" : "10",
      "configuration" : [ {
        "name" : "isIncrementalMode",
        "value" : true
      }, {
        "name" : "query",
        "value" : "SELECT * from edlhistory where status = 'COMPLETED' and id > ${OFFSET} ORDER BY id;"
      }, {
        "name" : "initialOffset",
        "value" : "53297"
      }, {
        "name" : "offsetColumn",
        "value" : "id"
      }, {
        "name" : "jdbcRecordType",
        "value" : "LIST_MAP"
      }, {
        "name" : "queryInterval",
        "value" : "${300 * SECONDS}"
      }, {
        "name" : "commonSourceConfigBean.maxBatchSize",
        "value" : 1
      }, {
        "name" : "commonSourceConfigBean.maxClobSize",
        "value" : 1000
      }, {
        "name" : "commonSourceConfigBean.maxBlobSize",
        "value" : 1000
      }, {
        "name" : "commonSourceConfigBean.numSQLErrorRetries",
        "value" : 0
      }, {
        "name" : "commonSourceConfigBean.newTableQueryInterval",
        "value" : "${10 * SECONDS}"
      }, {
        "name" : "commonSourceConfigBean.noMoreDataEventDelay",
        "value" : 0
      }, {
        "name" : "txnIdColumnName",
        "value" : null
      }, {
        "name" : "txnMaxSize",
        "value" : 10000
      }, {
        "name" : "hikariConfigBean.connectionString",
        "value" : "jdbc:postgresql://PG_HOST/uot"
      }, {
        "name" : "hikariConfigBean.useCredentials",
        "value" : true
      }, {
        "name" : "hikariConfigBean.username",
        "value" : "edl_readonly"
      }, {
        "name" : "hikariConfigBean.password",
        "value" : "PG_PASS"
      }, {
        "name" : "hikariConfigBean.driverProperties",
        "value" : [ { } ]
      }, {
        "name" : "hikariConfigBean.driverClassName",
        "value" : "org.postgresql.Driver"
      }, {
        "name" : "hikariConfigBean.connectionTestQuery",
        "value" : null
      }, {
        "name" : "hikariConfigBean.maximumPoolSize",
        "value" : 1
      }, {
        "name" : "hikariConfigBean.minIdle",
        "value" : 1
      }, {
        "name" : "hikariConfigBean.connectionTimeout",
        "value" : "${30 * SECONDS}"
      }, {
        "name" : "hikariConfigBean.idleTimeout",
        "value" : "${10 * MINUTES}"
      }, {
        "name" : "hikariConfigBean.maxLifetime",
        "value" : "${30 * MINUTES}"
      }, {
        "name" : "hikariConfigBean.autoCommit",
        "value" : false
      }, {
        "name" : "hikariConfigBean.readOnly",
        "value" : true
      }, {
        "name" : "hikariConfigBean.initialQuery",
        "value" : null
      }, {
        "name" : "hikariConfigBean.transactionIsolation",
        "value" : "DEFAULT"
      }, {
        "name" : "createJDBCNsHeaders",
        "value" : true
      }, {
        "name" : "jdbcNsHeaderPrefix",
        "value" : "jdbc."
      }, {
        "name" : "disableValidation",
        "value" : false
      }, {
        "name" : "unknownTypeAction",
        "value" : "CONVERT_TO_STRING"
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "commonSourceConfigBean.convertTimestampToString",
        "value" : false
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "Query EDL table",
        "xPos" : 60,
        "yPos" : 50,
        "stageType" : "SOURCE"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ "JDBCQueryConsumer_01OutputLane15592348204870" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "JythonEvaluator_01",
      "library" : "streamsets-datacollector-jython_2_7-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_jython_JythonDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "processingMode",
        "value" : "BATCH"
      }, {
        "name" : "initScript",
        "value" : ""
      }, {
        "name" : "script",
        "value" : "import os\nfrom java.lang import Class\nfrom java.sql import DriverManager, SQLException\n\nfor record in records:\n  try:\n    #source_filename = record.value['fname']\n    #base_path = record.value['filepath'].replace('/opt/volumes/uploads', '')\n    base_path = record.value['filepath'].replace('/opt/UA/volumes/uploads', '').replace('/opt/volumes/uploads', '')\n    output_filename = os.path.basename(base_path)\n    output_directory_name=os.path.dirname(base_path)\n        \n    ###This is the default input and output location\n    default_output_path='/data_zones/data_landing_zone/edl'\n    default_input_path='/apps/webapp/ExternalDataLoadUploads'\n    system_name = str(record.value['system']).replace(' ', '_').replace(',', '').replace('-','_').replace('(','').replace(')','').lower()\n    if (system_name == 'none'):\n      record.value['hdfs_file_path'] = default_output_path + '/unsorted' + output_directory_name\n      record.value['hdfs_file_system_dir'] = default_output_path + '/unsorted'\n    else:\n      record.value['hdfs_file_path'] = default_output_path + '/sorted/' + system_name + output_directory_name\n      record.value['hdfs_file_system_dir'] = default_output_path + '/sorted/' + system_name\n    record.value['input_file_path'] = default_input_path + output_directory_name    \n    #### COST system ####\n    if (record.value['system'] == 'COST'):\n      product_arr = record.value['product']\n      if (',' in product_arr):\n        product_info = product_arr.split(',')[0][1:-1]\n      else:\n        product_info = product_arr[2:-2]\n      \n      if (product_info == 'Cost Management - Enterprise'):\n          record.value['hdfs_file_path'] = '/data_zones/raw_zone/CostManagement/DCMO_Cost_Raw_Ent/' + output_filename\n          record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n          \n      elif (product_info == 'Cost Management - IT'):\n          record.value['hdfs_file_path'] = '/data_zones/raw_zone/CostManagement/DCMO_Cost_Raw_IT/' + output_filename\n          record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n          \n      elif (product_info == 'Cost Management - FM'):\n          record.value['hdfs_file_path'] = '/data_zones/raw_zone/CostManagement/DCMO_Cost_Raw_FM/' + output_filename\n          record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n          \n      elif (product_info == 'Cost Management - Medical'):\n          record.value['hdfs_file_path'] = '/data_zones/raw_zone/CostManagement/DCMO_Cost_Raw_Med/' + output_filename\n          record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n          \n      elif (product_info == 'Cost Management - Reference'):\n          record.value['hdfs_file_path'] = '/data_zones/raw_zone/CostManagement/DCMO_Cost_Raw_REF/' + output_filename\n          record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n          \n      elif (product_info == 'Cost Management - Real Property'):\n          record.value['hdfs_file_path'] = '/data_zones/raw_zone/CostManagement/DCMO_Cost_Raw_RP/' + output_filename\n          record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n      elif (record.value['system'] == 'COST'):\n          record.value['hdfs_file_path'] = '/data_zones/raw_zone/CostManagement/DCMO_Cost_Raw_Other/' + output_filename\n          record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n              \n    #### Budget Analytics product ####\n    elif (record.value['system'] == 'OMB-MAX'):\n      product_arr = record.value['product']\n      if (',' in product_arr):\n        product_info = product_arr.split(',')[0][1:-1]\n      else:\n        product_info = product_arr[2:-2]\n      if (product_info == 'Budget Analytics' and record.value['filename'][0:12] == 'BA_132Daily_'):\n        record.value['hdfs_file_path'] = '/data_zones/raw_zone/BudgetAnalytics/132_DailyFiles/' + output_filename\n        record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n        \n    ###### COVID Taskforce Daily uploaded datasets #####\n    elif (record.value['system'] == 'COVID-taskforce'):\n      ##### Carepoint data #####\n      if ('_carepoint_mtfbedstatus.xlsx' in output_filename):\n        record.value['hdfs_file_path'] = '/data_zones/raw_zone/carepoint/military_treatment_facility_bed_status_staging/' + output_filename\n        record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n      ##### DoDCases data #####\n      elif(output_filename.startswith('dodcases_')):\n        record.value['hdfs_file_path'] = '/data_zones/raw_zone/covid_taskforce/dod_case_location_staging/' + output_filename\n        record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n      ##### DMA data #####\n      elif(output_filename.startswith('DOD_covid_JS_data_')):\n        record.value['hdfs_file_path'] = '/data_zones/raw_zone/covid_taskforce/dod_casedata_dma_staging/' + output_filename\n        record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n    ###### PBIS #####\n    elif (record.value['system'] == 'PBIS'):\n      ##### Allocation Table #####\n      if ('PBIS_ALLOCATION_TABLE' in output_filename):\n        record.value['hdfs_file_path'] = '/data_zones/raw_zone/PBIS/allocation_detail/allocation_table/latest/' + output_filename\n        record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n      elif ('PBIS_WORKING_TABLE' in output_filename):\n        record.value['hdfs_file_path'] = '/data_zones/raw_zone/PBIS/working_tables/pbis/latest/' + output_filename\n        record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n      elif ('BOCS_WORKING_TABLE' in output_filename):\n        record.value['hdfs_file_path'] = '/data_zones/raw_zone/PBIS/working_tables/bocs/latest/' + output_filename\n        record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path\n\t##### Policy Analytics - Gamechanger clone files #####\t\n    elif ((record.value['system'] in [\"GAMECHANGER\",\"Policy Analytics\"]) and (record.value['portfolio'].find('GAMECHANGER')>0)):\n      record.value['input_file_path'] = '/apps/webapp/ExternalDataLoadUploads' + base_path      \n      record.attributes['GAMECHANGER_CLONE']='Yes'\n    output.write(record)\n  except Exception as e:\n    # Send record to error\n    error.write(record, str(e))"
      }, {
        "name" : "destroyScript",
        "value" : ""
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "Move the file",
        "xPos" : 280,
        "yPos" : 50,
        "stageType" : "PROCESSOR"
      },
      "inputLanes" : [ "JDBCQueryConsumer_01OutputLane15592348204870" ],
      "outputLanes" : [ "JythonEvaluator_01OutputLane15659819721100" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "StreamSelector_01",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_selector_SelectorDProcessor",
      "stageVersion" : "1",
      "configuration" : [ {
        "name" : "lanePredicates",
        "value" : [ {
          "outputLane" : "StreamSelector_01OutputLane1601907859424",
          "predicate" : "${record:attribute('GAMECHANGER_CLONE') == 'Yes'}"
        }, {
          "outputLane" : "StreamSelector_01OutputLane1566577257483",
          "predicate" : "default"
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "Stream Selector 1",
        "xPos" : 500,
        "yPos" : 110,
        "stageType" : "PROCESSOR"
      },
      "inputLanes" : [ "JythonEvaluator_01OutputLane15659819721100" ],
      "outputLanes" : [ "StreamSelector_01OutputLane1601907859424", "StreamSelector_01OutputLane1566577257483" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "Shell_01",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_executor_shell_ShellDExecutor",
      "stageVersion" : "1",
      "configuration" : [ {
        "name" : "config.environmentVariables",
        "value" : [ {
          "value" : "${record:value('/edl_app_id')}",
          "key" : "edl_app_id"
        }, {
          "value" : "${record:value('/userId')}",
          "key" : "userId"
        }, {
          "value" : "${record:value('/input_file_path')}",
          "key" : "hdfs_source_path"
        }, {
          "value" : "${record:value('/hdfs_file_path')}",
          "key" : "hdfs_destination_path"
        }, {
          "value" : "${record:value('/fileSize')}",
          "key" : "fileSize"
        }, {
          "value" : "${record:value('/createdAt')}",
          "key" : "createdAt"
        }, {
          "value" : "${record:value('/lastUpdate')}",
          "key" : "lastUpdate"
        }, {
          "value" : "${record:value('/filepath')}",
          "key" : "filepath"
        }, {
          "value" : "${record:value('/status')}",
          "key" : "status"
        }, {
          "value" : "${record:value('/identifier')}",
          "key" : "identifier"
        }, {
          "value" : "${record:value('/filename')}",
          "key" : "filename"
        }, {
          "value" : "${record:value('/parentId')}",
          "key" : "parentId"
        }, {
          "value" : "${record:value('/relocation')}",
          "key" : "relocation"
        }, {
          "value" : "${record:value('/ownername')}",
          "key" : "ownername"
        }, {
          "value" : "${record:value('/original_filename')}",
          "key" : "original_filename"
        }, {
          "value" : "${record:value('/system')}",
          "key" : "system"
        }, {
          "value" : "${record:value('/agency')}",
          "key" : "agency"
        }, {
          "value" : "${record:value('/treasury_indices')}",
          "key" : "treasury_indices"
        }, {
          "value" : "${record:value('/comments')}",
          "key" : "comments"
        }, {
          "value" : "${record:value('/gl_data')}",
          "key" : "gl_data"
        }, {
          "value" : "${record:value('/tb_data')}",
          "key" : "tb_data"
        }, {
          "value" : "${record:value('/feeder_data')}",
          "key" : "feeder_data"
        }, {
          "value" : "${record:value('/fsd_data')}",
          "key" : "fsd_data"
        }, {
          "value" : "${record:value('/other_data')}",
          "key" : "other_data"
        }, {
          "value" : "${record:value('/sensitive_data')}",
          "key" : "sensitive_data"
        }, {
          "value" : "${record:value('/period_start_month')}",
          "key" : "period_start_month"
        }, {
          "value" : "${record:value('/period_start_year')}",
          "key" : "period_start_year"
        }, {
          "value" : "${record:value('/period_end_month')}",
          "key" : "period_end_month"
        }, {
          "value" : "${record:value('/period_end_year')}",
          "key" : "period_end_year"
        }, {
          "value" : "${record:value('/portfolio')}",
          "key" : "portfolio"
        }, {
          "value" : "${record:value('/product')}",
          "key" : "product"
        }, {
          "value" : "${record:value('/other_products')}",
          "key" : "other_products"
        }, {
          "value" : "${record:value('/other_system')}",
          "key" : "other_system"
        }, {
          "value" : "${record:value('/user_display_name')}",
          "key" : "user_display_name"
        }, {
          "value" : "${record:value('/archived')}",
          "key" : "archived"
        }, {
          "value" : "${record:value('/convert_to_csv')}",
          "key" : "convert_to_csv"
        }, {
          "value" : "${record:value('/completion_email_recipients')}",
          "key" : "completion_email_recipients"
        }, {
          "value" : "${record:value('/pii_data')}",
          "key" : "pii_data"
        }, {
          "value" : "${record:value('/phi_data')}",
          "key" : "phi_data"
        }, {
          "value" : "${record:value('/md5')}",
          "key" : "md5"
        }, {
          "value" : "${record:value('/auto_unzip')}",
          "key" : "auto_unzip"
        }, {
          "value" : "${record:value('/attempt_count')}",
          "key" : "attempt_count"
        }, {
          "key" : "system_dir",
          "value" : "${record:value('/hdfs_file_system_dir')}"
        } ]
      }, {
        "name" : "config.timeout",
        "value" : "10000000"
      }, {
        "name" : "config.script",
        "value" : "kinit -k -t /etc/security/keytabs/streamsets.keytab ${KRB_NAME}\ndate_now=$(date +'%Y-%m-%d %H:%M:%S')\nhadoop fs -mkdir -p \"${system_dir}\"\nhadoop fs -cp \"${hdfs_source_path}\" \"${hdfs_destination_path}\"\n\nif [ $? -eq 0 ]; then   \n    edl_app_id=${edl_app_id}\n    userId=${userId}\n    hdfs_source_path=${hdfs_source_path}\n    hdfs_destination_path=${hdfs_destination_path}\n    fileSize=${fileSize}\n    createdAt=${createdAt}\n    lastUpdate=${lastUpdate}\n    filepath=${filepath}\n    status=${status}\n    identifier=${identifier}\n    filename=${filename}\n    parentId=${parentId}\n    relocation=${relocation}\n    ownername=${ownername}\n    original_filename=${original_filename}\n    system=${system}\n    agency=${agency}\n    treasury_indices=${treasury_indices}\n    comments=${comments}\n    gl_data=${gl_data}\n    tb_data=${tb_data}\n    feeder_data=${feeder_data}\n    fsd_data=${fsd_data}\n    other_data=${other_data}\n    sensitive_data=${sensitive_data}\n    period_start_month=${period_start_month}\n    period_start_year=${period_start_year}\n    period_end_month=${period_end_month}\n    period_end_year=${period_end_year}\n    portfolio=${portfolio}\n    product=${product}\n    other_products=${other_products}\n    other_system=${other_system}\n    user_display_name=${user_display_name}\n    archived=${archived}\n    convert_to_csv=${convert_to_csv}\n    completion_email_recipients=${completion_email_recipients}\n    pii_data=${pii_data}\n    phi_data=${phi_data}\n    md5=${md5}\n    auto_unzip=${auto_unzip}\n    attempt_count=${attempt_count}\n    move_status=\"successfully moved\"\n    log_data=( ${date_now} ${edl_app_id} ${userId} ${hdfs_source_path} ${hdfs_destination_path} ${fileSize} ${createdAt} ${lastUpdate} ${filepath} ${status} ${identifier} ${filename} ${parentId} ${relocation} ${ownername} ${original_filename} ${system} ${agency} ${treasury_indices} ${comments} ${gl_data} ${tb_data} ${feeder_data} ${fsd_data} ${other_data} ${sensitive_data} ${period_start_month} ${period_start_year} ${period_end_month} ${period_end_year} ${portfolio} ${product} ${other_products} ${other_system} ${user_display_name} ${archived} ${convert_to_csv} ${completion_email_recipients} ${pii_data} ${phi_data} ${md5} ${auto_unzip} ${attempt_count} ${move_status} )\n    log_data_formatted=$(echo \"${date_now}|\"\"${edl_app_id}|\"\"${userId}|\"\"${hdfs_source_path}|\"\"${hdfs_destination_path}|\"\"${fileSize}|\"\"${createdAt}|\"\"${lastUpdate}|\"\"${filepath}|\"\"${status}|\"\"${identifier}|\"\"${filename}|\"\"${parentId}|\"\"${relocation}|\"\"${ownername}|\"\"${original_filename}|\"\"${system}|\"\"${agency}|\"\"${treasury_indices}|\"\"${comments}|\"\"${gl_data}|\"\"${tb_data}|\"\"${feeder_data}|\"\"${fsd_data}|\"\"${other_data}|\"\"${sensitive_data}|\"\"${period_start_month}|\"\"${period_start_year}|\"\"${period_end_month}|\"\"${period_end_year}|\"\"${portfolio}|\"\"${product}|\"\"${other_products}|\"\"${other_system}|\"\"${user_display_name}|\"\"${archived}|\"\"${convert_to_csv}|\"\"${completion_email_recipients}|\"\"${pii_data}|\"\"${phi_data}|\"\"${md5}|\"\"${auto_unzip}|\"\"${attempt_count}|\"\"${move_status}\")\n    echo \"${log_data_formatted}\" | hdfs dfs -appendToFile - /data_zones/validation_zone/edl_log/edl_log_test.txt\nelse\n    status=\"failed to move\"\n    echo \"${hdfs_source_path} move has been failed on ${date_now}\" | hdfs dfs -appendToFile - /data_zones/validation_zone/edl_log/error/edl_error_log_test.txt\n    exit 1\nfi\nexit 0"
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "Copy file to proper output directory",
        "xPos" : 720,
        "yPos" : 170,
        "stageType" : "EXECUTOR"
      },
      "inputLanes" : [ "StreamSelector_01OutputLane1566577257483" ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "JDBCLookup_01",
      "library" : "streamsets-datacollector-jdbc-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_jdbclookup_JdbcLookupDProcessor",
      "stageVersion" : "3",
      "configuration" : [ {
        "name" : "query",
        "value" : "select CAST(clone_data AS TEXT) from gc_clones where '${record:value('/product')}' ~ lower(clone_name);"
      }, {
        "name" : "columnMappings",
        "value" : [ {
          "dataType" : "USE_COLUMN_TYPE"
        } ]
      }, {
        "name" : "multipleValuesBehavior",
        "value" : "SPLIT_INTO_MULTIPLE_RECORDS"
      }, {
        "name" : "missingValuesBehavior",
        "value" : "SEND_TO_ERROR"
      }, {
        "name" : "maxClobSize",
        "value" : 1000
      }, {
        "name" : "maxBlobSize",
        "value" : 1000
      }, {
        "name" : "hikariConfigBean.connectionString",
        "value" : "jdbc:postgresql://PG_HOST/game_changer"
      }, {
        "name" : "hikariConfigBean.useCredentials",
        "value" : true
      }, {
        "name" : "hikariConfigBean.username",
        "value" : "gc_orchestration_user"
      }, {
        "name" : "hikariConfigBean.password",
        "value" : "PG_PASS"
      }, {
        "name" : "hikariConfigBean.driverProperties",
        "value" : [ { } ]
      }, {
        "name" : "hikariConfigBean.driverClassName",
        "value" : "org.postgresql.Driver"
      }, {
        "name" : "hikariConfigBean.connectionTestQuery",
        "value" : null
      }, {
        "name" : "hikariConfigBean.maximumPoolSize",
        "value" : 1
      }, {
        "name" : "hikariConfigBean.minIdle",
        "value" : 1
      }, {
        "name" : "hikariConfigBean.connectionTimeout",
        "value" : "${30 * SECONDS}"
      }, {
        "name" : "hikariConfigBean.idleTimeout",
        "value" : "${10 * MINUTES}"
      }, {
        "name" : "hikariConfigBean.maxLifetime",
        "value" : "${30 * MINUTES}"
      }, {
        "name" : "hikariConfigBean.autoCommit",
        "value" : false
      }, {
        "name" : "hikariConfigBean.readOnly",
        "value" : true
      }, {
        "name" : "hikariConfigBean.initialQuery",
        "value" : null
      }, {
        "name" : "hikariConfigBean.transactionIsolation",
        "value" : "DEFAULT"
      }, {
        "name" : "cacheConfig.enabled",
        "value" : false
      }, {
        "name" : "cacheConfig.maxSize",
        "value" : -1
      }, {
        "name" : "cacheConfig.evictionPolicyType",
        "value" : null
      }, {
        "name" : "cacheConfig.expirationTime",
        "value" : 1
      }, {
        "name" : "cacheConfig.timeUnit",
        "value" : "SECONDS"
      }, {
        "name" : "cacheConfig.retryOnCacheMiss",
        "value" : false
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "lookup gamechanger clone info",
        "xPos" : 720,
        "yPos" : 40,
        "stageType" : "PROCESSOR"
      },
      "inputLanes" : [ "StreamSelector_01OutputLane1601907859424" ],
      "outputLanes" : [ "JDBCLookup_01OutputLane16019079303800" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "JSONParser_01",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_jsonparser_JsonParserDProcessor",
      "stageVersion" : "1",
      "configuration" : [ {
        "name" : "fieldPathToParse",
        "value" : "/clone_data"
      }, {
        "name" : "removeCtrlChars",
        "value" : false
      }, {
        "name" : "parsedFieldPath",
        "value" : "/parsed"
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "expand clone info json",
        "xPos" : 940,
        "yPos" : 40,
        "stageType" : "PROCESSOR"
      },
      "inputLanes" : [ "JDBCLookup_01OutputLane16019079303800" ],
      "outputLanes" : [ "JSONParser_01OutputLane16019079405220" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "Shell_05",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_executor_shell_ShellDExecutor",
      "stageVersion" : "1",
      "configuration" : [ {
        "name" : "config.environmentVariables",
        "value" : [ {
          "key" : "SCRIPT_ENV",
          "value" : "prod"
        }, {
          "key" : "PROJECT_NAME",
          "value" : "${record:value('/parsed/project_name')}"
        }, {
          "key" : "FILENAME",
          "value" : "${record:value('/original_filename')}"
        }, {
          "key" : "INPUT_FILE_PATH",
          "value" : "${record:value('/input_file_path')}"
        } ]
      }, {
        "name" : "config.timeout",
        "value" : "3600000"
      }, {
        "name" : "config.script",
        "value" : "#!/usr/bin/env bash\nset -o errexit\nset -o nounset\nset -o pipefail\nSECONDS=0\n\n# always set in stage params\nSCRIPT_ENV=${SCRIPT_ENV:-dev}\n# Check basic params\ncase \"$SCRIPT_ENV\" in\ndev)\n  echo \"RUNNING IN DEV ENV\"\n  ;;\nprod)\n  echo \"RUNNING IN PROD ENV\"\n  ;;\ndocker)\n  echo \"RUNNING IN DOCKER ENV\"\n  ;;\n*)\n  echo >&2 \"Must set SCRIPT_ENV = (prod|dev|docker)\"\n  exit 2\n  ;;\nesac\n\n\n#####\n## ## Commands to use Python and AWS\n#####\nfunction kinit_command() {\nkinit -k -t /etc/security/keytabs/streamsets.keytab ${KRB_NAME}\n}\nfunction setup_aws_and_python_exec_commands() {\n  case \"$SCRIPT_ENV\" in\n  dev)\n    AWS_CMD=\"aws\"\n    export AWS_DEFAULT_REGION=\"us-east-1\"    \n    ;;\n  prod)\n    AWS_CMD=\"aws\"\n    export AWS_DEFAULT_REGION=\"us-gov-west-1\"\n    ;;\n  docker)\n    AWS_CMD=\"aws --endpoint-url http://localstack:4572\"\n    ;;\n  *)\n    echo >&2 \"Must set SCRIPT_ENV = (prod|dev|test)\"\n    exit 2\n    ;;\n  esac\n  echo \"Using AWS: $AWS_CMD\"\n}\n\n\n\n#####\n## ## clone to s3\n#####\nfunction clone_to_s3() {\n  local RESPONSE_HEADER=\"result\"\n  timestamp=$(sed 's/.\\{5\\}$//' <<< $(date --iso-8601=seconds))\n  timestamp=$(sed 's/://g' <<< $timestamp)\n  echo \"input file path: ${INPUT_FILE_PATH}\"\n  hadoop fs -mkdir -p s3a://advana-data-zone/bronze/gamechanger/projects/${PROJECT_NAME}/uploads/${timestamp}/\n  hadoop distcp \"${INPUT_FILE_PATH}\" \"s3a://advana-data-zone/bronze/gamechanger/projects/${PROJECT_NAME}/uploads/${timestamp}/${FILENAME}\"\n}\n\n\necho \"***************************** Start *****************************\"\nkinit_command\nsetup_aws_and_python_exec_commands\nclone_to_s3\n\n\nduration=$SECONDS\necho \"$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed.\"\necho \"***************************** Done *****************************\""
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "Gamechanger Clone files to S3",
        "xPos" : 1161.1673583984375,
        "yPos" : 40,
        "stageType" : "EXECUTOR"
      },
      "inputLanes" : [ "JSONParser_01OutputLane16019079405220" ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    } ],
    "errorStage" : {
      "instanceName" : "WritetoKafka_ErrorStage",
      "library" : "streamsets-datacollector-cdh_6_0-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_kafka_ToErrorKafkaDTarget",
      "stageVersion" : "4",
      "configuration" : [ {
        "name" : "conf.dataGeneratorFormatConfig.charset",
        "value" : "UTF-8"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvFileFormat",
        "value" : "CSV"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvHeader",
        "value" : "NO_HEADER"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvReplaceNewLines",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvReplaceNewLinesString",
        "value" : " "
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomDelimiter",
        "value" : "|"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomEscape",
        "value" : "\\"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomQuote",
        "value" : "\""
      }, {
        "name" : "conf.dataGeneratorFormatConfig.jsonMode",
        "value" : "MULTIPLE_OBJECTS"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textFieldPath",
        "value" : "/text"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textRecordSeparator",
        "value" : "\\n"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textFieldMissingAction",
        "value" : "ERROR"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textEmptyLineIfNull",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroSchemaSource",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroSchema",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.registerSchema",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaRegistryUrlsForRegistration",
        "value" : [ ]
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaRegistryUrls",
        "value" : [ ]
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaLookupMode",
        "value" : "SUBJECT"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.subject",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.subjectToRegister",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaId",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.includeSchema",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroCompression",
        "value" : "NULL"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.binaryFieldPath",
        "value" : "/"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.protoDescriptorFile",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.messageType",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.fileNameEL",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.wholeFileExistsAction",
        "value" : "TO_ERROR"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.includeChecksumInTheEvents",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.checksumAlgorithm",
        "value" : "MD5"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlPrettyPrint",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlValidateSchema",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlSchema",
        "value" : null
      }, {
        "name" : "conf.metadataBrokerList",
        "value" : "KAFKA_BROKER_HOST:9093"
      }, {
        "name" : "conf.runtimeTopicResolution",
        "value" : false
      }, {
        "name" : "conf.topicExpression",
        "value" : "${record:value('/topic')}"
      }, {
        "name" : "conf.topicWhiteList",
        "value" : "*"
      }, {
        "name" : "conf.topic",
        "value" : "error_log"
      }, {
        "name" : "conf.partitionStrategy",
        "value" : "ROUND_ROBIN"
      }, {
        "name" : "conf.partition",
        "value" : "${0}"
      }, {
        "name" : "conf.singleMessagePerBatch",
        "value" : false
      }, {
        "name" : "conf.kafkaProducerConfigs",
        "value" : [ {
          "key" : "security.protocol",
          "value" : "SSL"
        }, {
          "key" : "ssl.truststore.location",
          "value" : "/opt/cloudera/security/pki/truststore.jks"
        }, {
          "key" : "ssl.truststore.password",
          "value" : "cloudera"
        }, {
          "key" : "ssl.keystore.location",
          "value" : "/opt/cloudera/security/pki/agent.jks"
        }, {
          "key" : "ssl.keystore.password",
          "value" : "cloudera"
        }, {
          "key" : "ssl.enabled.protocols",
          "value" : "TLSv1.2"
        }, {
          "key" : "ssl.keystore.type",
          "value" : "JKS"
        } ]
      }, {
        "name" : "responseConf.responseType",
        "value" : "SUCCESS_RECORDS"
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "Error Records - Write to Kafka",
        "xPos" : 1380,
        "yPos" : 50,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    },
    "info" : {
      "pipelineId" : "EDLtoHDFSTransferV9backuped4b285d-9e3a-4af6-a4e9-9896540f2b33",
      "title" : "EDL to HDFS Transfer V10",
      "description" : "Route the files based on system drop down selection in EDL app",
      "created" : 1602721563236,
      "lastModified" : 1603837079655,
      "creator" : "1539289019",
      "lastModifier" : "1539289019",
      "lastRev" : "0",
      "uuid" : "6c439d76-1fc1-4006-b8ba-a7b5cfbead01",
      "valid" : true,
      "metadata" : {
        "labels" : [ "people/Iftekhar" ]
      },
      "name" : "EDLtoHDFSTransferV9backuped4b285d-9e3a-4af6-a4e9-9896540f2b33",
      "sdcVersion" : "3.6.1",
      "sdcId" : "bd8e8066-aff2-11e9-8c4d-6541b30c6fc9"
    },
    "metadata" : {
      "labels" : [ "people/Iftekhar" ]
    },
    "statsAggregatorStage" : {
      "instanceName" : "statsAggregatorStageInstance",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_StatsDpmDirectlyDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "stageType" : "TARGET",
        "label" : "Stats Aggregator -Write to Control Hub directly"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    },
    "startEventStages" : [ {
      "instanceName" : "Discard_StartEventStage",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "description" : "",
        "label" : "Start Event - Discard",
        "xPos" : 280,
        "yPos" : 50,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    } ],
    "stopEventStages" : [ {
      "instanceName" : "Discard_StopEventStage",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "description" : "",
        "label" : "Stop Event - Discard",
        "xPos" : 280,
        "yPos" : 50,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    } ],
    "testOriginStage" : {
      "instanceName" : "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource_TestOriginStage",
      "library" : "streamsets-datacollector-dev-lib",
      "stageName" : "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource",
      "stageVersion" : "3",
      "configuration" : [ {
        "name" : "rawData",
        "value" : "{\n  \"f1\": \"abc\",\n  \"f2\": \"xyz\",\n  \"f3\": \"lmn\"\n}"
      }, {
        "name" : "stopAfterFirstBatch",
        "value" : false
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      } ],
      "uiInfo" : {
        "stageType" : "SOURCE",
        "label" : "Test Origin - Dev Raw Data Source"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource_TestOriginStageOutputLane1" ],
      "eventLanes" : [ ],
      "services" : [ {
        "service" : "com.streamsets.pipeline.api.service.dataformats.DataFormatParserService",
        "serviceVersion" : 1,
        "configuration" : [ {
          "name" : "displayFormats",
          "value" : "DELIMITED,JSON,LOG,SDC_JSON,TEXT,XML"
        }, {
          "name" : "dataFormat",
          "value" : "JSON"
        }, {
          "name" : "dataFormatConfig.compression",
          "value" : "NONE"
        }, {
          "name" : "dataFormatConfig.filePatternInArchive",
          "value" : "*"
        }, {
          "name" : "dataFormatConfig.charset",
          "value" : "UTF-8"
        }, {
          "name" : "dataFormatConfig.removeCtrlChars",
          "value" : false
        }, {
          "name" : "dataFormatConfig.textMaxLineLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.useCustomDelimiter",
          "value" : false
        }, {
          "name" : "dataFormatConfig.customDelimiter",
          "value" : "\\r\\n"
        }, {
          "name" : "dataFormatConfig.includeCustomDelimiterInTheText",
          "value" : false
        }, {
          "name" : "dataFormatConfig.jsonContent",
          "value" : "MULTIPLE_OBJECTS"
        }, {
          "name" : "dataFormatConfig.jsonMaxObjectLen",
          "value" : 4096
        }, {
          "name" : "dataFormatConfig.csvFileFormat",
          "value" : "CSV"
        }, {
          "name" : "dataFormatConfig.csvHeader",
          "value" : "NO_HEADER"
        }, {
          "name" : "dataFormatConfig.csvAllowExtraColumns",
          "value" : false
        }, {
          "name" : "dataFormatConfig.csvExtraColumnPrefix",
          "value" : "_extra_"
        }, {
          "name" : "dataFormatConfig.csvMaxObjectLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.csvCustomDelimiter",
          "value" : "|"
        }, {
          "name" : "dataFormatConfig.csvCustomEscape",
          "value" : "\\"
        }, {
          "name" : "dataFormatConfig.csvCustomQuote",
          "value" : "\""
        }, {
          "name" : "dataFormatConfig.csvEnableComments",
          "value" : false
        }, {
          "name" : "dataFormatConfig.csvCommentMarker",
          "value" : "#"
        }, {
          "name" : "dataFormatConfig.csvIgnoreEmptyLines",
          "value" : false
        }, {
          "name" : "dataFormatConfig.csvRecordType",
          "value" : "LIST_MAP"
        }, {
          "name" : "dataFormatConfig.csvSkipStartLines",
          "value" : 0
        }, {
          "name" : "dataFormatConfig.parseNull",
          "value" : false
        }, {
          "name" : "dataFormatConfig.nullConstant",
          "value" : "\\\\N"
        }, {
          "name" : "dataFormatConfig.xmlRecordElement",
          "value" : null
        }, {
          "name" : "dataFormatConfig.includeFieldXpathAttributes",
          "value" : false
        }, {
          "name" : "dataFormatConfig.xPathNamespaceContext",
          "value" : [ ]
        }, {
          "name" : "dataFormatConfig.outputFieldAttributes",
          "value" : false
        }, {
          "name" : "dataFormatConfig.xmlMaxObjectLen",
          "value" : 4096
        }, {
          "name" : "dataFormatConfig.logMode",
          "value" : "COMMON_LOG_FORMAT"
        }, {
          "name" : "dataFormatConfig.logMaxObjectLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.retainOriginalLine",
          "value" : false
        }, {
          "name" : "dataFormatConfig.customLogFormat",
          "value" : "%h %l %u %t \"%r\" %>s %b"
        }, {
          "name" : "dataFormatConfig.regex",
          "value" : "^(\\S+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"(\\S+) (\\S+) (\\S+)\" (\\d{3}) (\\d+)"
        }, {
          "name" : "dataFormatConfig.fieldPathsToGroupName",
          "value" : [ {
            "fieldPath" : "/",
            "group" : 1
          } ]
        }, {
          "name" : "dataFormatConfig.grokPatternDefinition",
          "value" : null
        }, {
          "name" : "dataFormatConfig.grokPattern",
          "value" : "%{COMMONAPACHELOG}"
        }, {
          "name" : "dataFormatConfig.onParseError",
          "value" : "ERROR"
        }, {
          "name" : "dataFormatConfig.maxStackTraceLines",
          "value" : 50
        }, {
          "name" : "dataFormatConfig.enableLog4jCustomLogFormat",
          "value" : false
        }, {
          "name" : "dataFormatConfig.log4jCustomLogFormat",
          "value" : "%r [%t] %-5p %c %x - %m%n"
        }, {
          "name" : "dataFormatConfig.avroSchemaSource",
          "value" : null
        }, {
          "name" : "dataFormatConfig.avroSchema",
          "value" : null
        }, {
          "name" : "dataFormatConfig.schemaRegistryUrls",
          "value" : [ ]
        }, {
          "name" : "dataFormatConfig.schemaLookupMode",
          "value" : "SUBJECT"
        }, {
          "name" : "dataFormatConfig.subject",
          "value" : null
        }, {
          "name" : "dataFormatConfig.schemaId",
          "value" : null
        }, {
          "name" : "dataFormatConfig.protoDescriptorFile",
          "value" : null
        }, {
          "name" : "dataFormatConfig.messageType",
          "value" : null
        }, {
          "name" : "dataFormatConfig.isDelimited",
          "value" : false
        }, {
          "name" : "dataFormatConfig.binaryMaxObjectLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.datagramMode",
          "value" : "SYSLOG"
        }, {
          "name" : "dataFormatConfig.typesDbPath",
          "value" : null
        }, {
          "name" : "dataFormatConfig.convertTime",
          "value" : false
        }, {
          "name" : "dataFormatConfig.excludeInterval",
          "value" : false
        }, {
          "name" : "dataFormatConfig.authFilePath",
          "value" : null
        }, {
          "name" : "dataFormatConfig.netflowOutputValuesMode",
          "value" : "RAW_AND_INTERPRETED"
        }, {
          "name" : "dataFormatConfig.maxTemplateCacheSize",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.templateCacheTimeoutMs",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.netflowOutputValuesModeDatagram",
          "value" : "RAW_AND_INTERPRETED"
        }, {
          "name" : "dataFormatConfig.maxTemplateCacheSizeDatagram",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.templateCacheTimeoutMsDatagram",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.wholeFileMaxObjectLen",
          "value" : 8192
        }, {
          "name" : "dataFormatConfig.rateLimit",
          "value" : "-1"
        }, {
          "name" : "dataFormatConfig.verifyChecksum",
          "value" : false
        }, {
          "name" : "dataFormatConfig.excelHeader",
          "value" : null
        } ]
      } ]
    },
    "valid" : true,
    "issues" : {
      "stageIssues" : { },
      "pipelineIssues" : [ ],
      "issueCount" : 0
    },
    "previewable" : true
  },
  "pipelineRules" : {
    "schemaVersion" : 3,
    "version" : 2,
    "metricsRuleDefinitions" : [ {
      "id" : "badRecordsAlertID",
      "alertText" : "High incidence of Error Records",
      "metricId" : "pipeline.batchErrorRecords.counter",
      "metricType" : "COUNTER",
      "metricElement" : "COUNTER_COUNT",
      "condition" : "${value() > 100}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1550181833344,
      "valid" : true
    }, {
      "id" : "stageErrorAlertID",
      "alertText" : "High incidence of Stage Errors",
      "metricId" : "pipeline.batchErrorMessages.counter",
      "metricType" : "COUNTER",
      "metricElement" : "COUNTER_COUNT",
      "condition" : "${value() > 100}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1550181833344,
      "valid" : true
    }, {
      "id" : "idleGaugeID",
      "alertText" : "Pipeline is Idle",
      "metricId" : "RuntimeStatsGauge.gauge",
      "metricType" : "GAUGE",
      "metricElement" : "TIME_OF_LAST_RECEIVED_RECORD",
      "condition" : "${time:now() - value() > 120000}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1550181833344,
      "valid" : true
    }, {
      "id" : "batchTimeAlertID",
      "alertText" : "Batch taking more time to process",
      "metricId" : "RuntimeStatsGauge.gauge",
      "metricType" : "GAUGE",
      "metricElement" : "CURRENT_BATCH_AGE",
      "condition" : "${value() > 200}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1550181833344,
      "valid" : true
    }, {
      "id" : "memoryLimitAlertID",
      "alertText" : "Memory limit for pipeline exceeded",
      "metricId" : "pipeline.memoryConsumed.counter",
      "metricType" : "COUNTER",
      "metricElement" : "COUNTER_COUNT",
      "condition" : "${value() > (jvm:maxMemoryMB() * 0.65)}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1550181833344,
      "valid" : true
    } ],
    "dataRuleDefinitions" : [ ],
    "driftRuleDefinitions" : [ ],
    "uuid" : "0c7d07fa-23e1-49b9-8bb7-102bafb19f13",
    "configuration" : [ {
      "name" : "emailIDs",
      "value" : [ ]
    }, {
      "name" : "webhookConfigs",
      "value" : [ ]
    } ],
    "ruleIssues" : [ ],
    "configIssues" : [ ]
  },
  "libraryDefinitions" : null
}